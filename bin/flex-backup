#! /usr/bin/env ruby

require 'optparse'
require 'flex-backup'

options  = { }
version  = File.read(File.expand_path('../../VERSION', __FILE__)).strip
copy     = "flex-backup #{version} (c) 2012 Domizio Demichelis"
optparse = OptionParser.new do |opts|

  opts.banner = <<-banner

    flex-backup:
        Flex tool to dump/load data from/to ElasticSearch.
    Usage:
        flex-backup <command> [options]
    <command>:
        dump   dumps the data from one or more ElasticSearch indices
        load   loads a dumpfile
        stats  prints the full ElasticSearch stats

    Notice: The load command will load the dump-file into ElasticSearch without removing any pre-existent data.
            If you need fresh indices, use the flex:delete_indices and flex:create_indices rake tasks from your
            application, which will also recreate the mapping.
  banner


  opts.separator ''
  opts.separator 'Common options:'

  options[:file] = './flex-backup.dump'
  opts.on( '-f', '--file [FILE]', "The path of the dumpfile (default: '#{options[:file]}')" ) do |f|
    options[:file] = f
  end

  opts.separator ''
  opts.separator 'Dump options:'

  options[:index] = nil
  opts.on( '-i', '--index [INDEX_OR_INDICES]', Array, 'The index or comma separated indices to dump (default: all indices)' ) do |i|
    options[:index] = i
  end

  options[:type] = nil
  opts.on( '-t', '--type [TYPE_OR_TYPES]', Array, 'The type or comma separated types to dump (default: all types)' ) do |t|
    options[:type] = t
  end

  options[:scroll] = '5m'
  opts.on( '-s', '--scroll [TIME]', "The ElasticSearch scroll time (default: #{options[:scroll]})" ) do |s|
    options[:scroll] = s
  end

  options[:size] = 50
  opts.on( '-z', '--size [SIZE]', Integer, "The chunk size to dump per shard (default: #{options[:size]} * number of shards)" ) do |z|
    options[:size] = z
  end

  opts.separator ''
  opts.separator 'Load options:'

  options[:timeout] = 20
  opts.on( '-o', '--timeout [SECONDS]', Integer, "The http_client timeout for bulk loading (default: #{options[:timeout]} seconds)" ) do |o|
    options[:timeout] = o
  end

  options[:batch_size] = 1000
  opts.on( '-b', '--batch_size [BATCH_SIZE]', Integer, "The batch size to load (default: #{options[:batch_size]})" ) do |z|
    options[:batch_size] = z
  end

  opts.separator ''
  opts.separator 'Other options:'

  opts.on( '-v', '--version', 'Shows the version and exits' ) do
    puts version
    exit
  end

  opts.on_tail( '-h', '--help', 'Displays this screen' ) do
    puts copy
    puts opts
    exit
  end

end

optparse.parse!
command = ARGV.first
exec "#{$0} -h" if command.nil?
puts copy

case command

when 'dump'
  Flex::Backup.dump_to_file(options)

when 'load'
  Flex::Backup.load_from_file(options)

when 'stats'
  puts '>> puts Flex.stats.to_yaml'
  puts Flex.stats.to_yaml

else
  puts "unknown command: #{command.inspect}"

end
